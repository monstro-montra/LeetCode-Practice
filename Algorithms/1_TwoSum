'''
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

 

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]
 

Constraints:

2 <= nums.length <= 104
-109 <= nums[i] <= 109
-109 <= target <= 109
Only one valid answer exists.
 

Follow-up: Can you come up with an algorithm that is less than O(n2) time complexity?
'''


from typing import List

class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]: # return a list of ints
        seen = {} # initialize empty dictionary

        # map each number in the list to its index. key-value pairs = number-index pairs
        for i, value in enumerate(nums):
            complement = target - value # this will be the value that 'complements' the value to reach the target.
            if complement in seen: # check to see if the complement and the current value add up to the target
                return [seen[complement], i] # return a list containing the index of previous complement and the current index, i
            seen[value] = i # complement not found, add value and index i to the seen dictionary

        return None
            

        

if __name__ == "__main__":
    nums = [2, 7, 11, 15]
    target = 13

    solution = Solution()
    print(solution.twoSum(nums, target))